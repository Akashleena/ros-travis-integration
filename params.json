{
  "name": "Travis for ROS packages",
  "tagline": "Continuous Integration for ROS packages",
  "body": "# ROS package continuous integration with travis.\r\n\r\nThis repository contains a [.travis.yml](https://github.com/felixduvallet/ros-travis-integration/blob/master/.travis.yml)\r\nfile for setting up continuous integration (through Travis-CI) for any ROS package.\r\n\r\nImprovements & issues are welcome via pull requests and the issue tracker.\r\n\r\nIn addition, this repository contains several example (trivial) ROS packages\r\nthat serve as example packages for Travis to build and test. They also showcase\r\nhow to correctly handle dependencies (system and source).\r\n\r\n[![Build Status](https://travis-ci.org/felixduvallet/ros-travis-integration.svg?branch=master)](https://travis-ci.org/felixduvallet/ros-travis-integration)\r\n\r\n# Installation instructions\r\n\r\nTo enable Travis continuous integration for your ROS package, first copy these\r\nfiles to the *root* of your repository:\r\n - [.travis.yml](https://github.com/felixduvallet/ros-travis-integration/blob/master/.travis.yml): The script that tells Travis CI what to build.\r\n - [dependencies.rosinstall](https://github.com/felixduvallet/ros-travis-integration/blob/master/dependencies.rosinstall): A wstool-generated list of source dependencies\r\n   (optional). **Update the contents with your packages.**\r\n - [catkin.options](https://github.com/felixduvallet/ros-travis-integration/blob/master/catkin.options): Contents of this file are passed as arguments to catkin_make,\r\n   for example package blacklists (optional).\r\n\r\nThen, log on to travis-ci and turn on continuous integration for the repository:\r\n - [travis-ci.org](http://travis-ci.org) is free for open-source repositories.\r\n - [travis-ci.com](http://travis-ci.com) provides the same functionality for private repositories (at a price).\r\n\r\nFrom then on, any push to this repository will trigger a new Travis-ci build.\r\n\r\n# About Travis-CI\r\n\r\nTravis provides a clean virtual machine for each build. The .travis.yml script\r\ninstalls ROS, creates a workspace, resolves all given dependencies, and sets\r\nenvironment variables (devel/setup.bash). Then, it compiles the entire ROS\r\nworkspace (ensuring there are no compilation errors), and runs any available\r\nunittests. If any of the compilation/test phases fail, the build is marked as a\r\nfailure. Otherwise, it's a clean build.\r\n\r\nFor more information on Travis CI, see their documentation:\r\nhttp://docs.travis-ci.com/\r\n\r\n# Handling Dependencies:\r\n\r\nWe handle two types of package dependencies:\r\n  - packages (ros and otherwise) available through apt-get. These are installed\r\n    using rosdep, based on the information in all the ROS package.xml files.\r\n  - dependencies that must be checked out from source. These are handled by\r\n    'wstool', and should be listed in a file named dependencies.rosinstall.  For\r\n    example, depdendencies.rosinstall has a source dependency on a fork of the\r\n    pocketsphinx package (you should remove this and replace it with your\r\n    package dependencies). You should use the `https` url (not `ssh`) to\r\n    check out the repository.\r\n\r\nNote that any packages located inside your catkin workspace will take\r\nprecendence over the apt-get package (this allows you to use the cutting-edge\r\nversion of a package directly from github instead of what's available via\r\nrosdep).\r\n\r\nAll dependencies should be handled in one of these fashions; you should not add\r\npackage dependencies directly to the .travis.yml file.\r\n\r\nFor public builds (i.e. when using travis-ci.org), `wstool` dependencies should\r\nuse a *public* access link (for instance, the https github address instead of\r\nssh). Otherwise you will get a \"Permission denied (publickey)\" error.\r\n\r\n# ROS variables:\r\n\r\nThere are two variables you may want to change:\r\n  - ROS_DISTRO (default is indigo): Note that packages must be available for\r\n    ubuntu 14.04 trusty.\r\n  - ROSINSTALL_FILE (default is dependencies.rosinstall in repo): This file\r\n    list all necessary repositories in wstool format (see the ros wiki). If the\r\n    file does not exists then nothing happens.\r\n  - CATKIN_OPTIONS (default is catkin.options in repo): File **whose contents**\r\n    specify the options passed to catkin_make. If this file does not exist,\r\n    catkin_make is called without options. For example, you can have catkin\r\n    *not* build several packages by putting this inside the file:\r\n\r\n        -DCATKIN_BLACKLIST_PACKAGES=pkg_a;pkg_b\r\n\r\n# Private repositories:\r\n\r\nTravis-ci.com can build a private repository. However if your package has\r\ndependencies that are also private, you have to go through additional steps.\r\n\r\nNOTE: This very much remains work-in-progress (i.e. experimental).\r\n\r\nThe instructions are generally listed here:\r\nhttp://docs.travis-ci.com/user/private-dependencies/\r\n\r\n1. Create a machine account on github.\r\n2. Generate a public/private key on your computer, if not done already.\r\n3. Add the public key (id_rsa.pub) to the machine account's github settings (see [here](https://developer.github.com/guides/managing-deploy-keys/#machine-users)).\r\n4. In github, make sure the machine account has read access to all the dependency repositories.\r\n5. In github, add the machine account as an administrator for the repository you want to build (note: not the dependencies).\r\n6. In travis settings for the machine user, add the *private* key (id_rsa) in the build job settings.\r\n\r\n# The example packages\r\n\r\nThese packages start simple and get more complicated, and serve as sample\r\npackages to give Travis something to do. They're also examples of how to best\r\nhandle dependencies on other packages; both checking out from source.\r\n\r\n* basic_ros_pkg: Just a simple C++ node.\r\n* ros_pkg_with_tests: Includes both python and C++ tests\r\n* ros_pkg_with_dependencies: Has dependencies in package.xml that must be\r\n  resolved by wstool (e.g., clone pocketsphinx from source) and rosdep (e.g.,\r\n  audio_common_msgs using apt-get).\r\n\r\nYou can look at the Travis build log to see exactly how it resolves dependencies\r\nand then builds the package.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}